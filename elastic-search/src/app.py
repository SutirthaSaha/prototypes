from flask import Flask, request, jsonify
from gevent.pywsgi import WSGIServer
from datetime import datetime
from es import create_elasticsearch_client

app = Flask(__name__)
es = create_elasticsearch_client()


@app.route('/ping', methods=['GET'])
def ping():
    try:
        if es.ping():
            print("Successfully connected to Elasticsearch!")
            return jsonify({"Connection Status": "Successful"})
        else:
            print("Failed to connect to Elasticsearch.")
    except ConnectionError as e:
        print(f"Connection error occurred: {e}")
    except Exception as e:
        print(f"An error occurred: {e}")
    return jsonify({"Connection Status": "Failure"})


@app.route('/employee', methods=['POST'])
def create_employee():
    print("Create employee")
    data = request.get_json()
    '''Format
    {
        "employee_id": "3",
        "name": "Alice Johnson",
        "age": 28,
        "department": "Finance",
        "position": "Financial Analyst",
        "hire_date": "2021-03-22"
    }
    '''
    data['created_at'] = datetime.now().isoformat()
    response = es.index(index='employees', body=data)

    # Print the response to see the autogenerated ID
    return jsonify(response.body)


@app.route('/clear_index', methods=['DELETE'])
def clear_index():
    try:
        # Delete the index if it exists
        if es.indices.exists(index='employees'):
            es.indices.delete(index='employees')
            print("Index 'employees' deleted successfully.")
            return jsonify({"status": "Index 'employees' deleted successfully."})
        else:
            print("Index 'employees' does not exist.")
            return jsonify({"status": "Index 'employees' does not exist."})
    except Exception as e:
        print(f"An error occurred: {e}")
        return jsonify({"error": str(e)}), 500


@app.route('/view_all', methods=['GET'])
def view_all():
    try:
        # Search for all documents in the 'employees' index
        response = es.search(index='employees', body={"query": {"match_all": {}}})
        # Extract the hits from the response
        hits = response['hits']['hits']
        return jsonify(hits)
    except Exception as e:
        print(f"An error occurred: {e}")
        return jsonify({"error": str(e)}), 500


if __name__ == "__main__":
    server = WSGIServer(('127.0.0.1', 5000), app)
    server.serve_forever()
